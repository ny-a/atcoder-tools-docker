#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};
{% if mod %}

const long long MOD = {{ mod }};
using mint = atcoder::modint{{ mod }};
{% endif %}
{% if yes_str %}

const std::string YES = "{{ yes_str }}";
{% endif %}
{% if no_str %}

const std::string NO = "{{ no_str }}";
{% endif %}

{% if prediction_success %}
void solve({{ formal_arguments }}) {

}
{% else %}
void solve() {

}
{% endif %}

// Generated by {{ atcodertools.version }} {{ atcodertools.url }}
int main() {
    {% if prediction_success %}
    {{input_part}}
    solve({{ actual_arguments }});
    {% else %}
    // Failed to predict input format
    solve();
    {% endif %}
    return 0;
}
